import "google/protobuf/descriptor.proto";

message Origin {
  optional uint32 id = 1;
  optional string name = 2;
}

message Packet {
  enum Type {
    ERROR = 0;
    CHAT = 1;
    MOVE = 2;
    AVATAR = 3;
    REALM = 4;
    REGION = 5;
    VIEWPORT = 6;
    ENTITY = 7;
    STOP_MOVE = 8;
    TELEPORT = 9;
  }

  optional Type type = 1;
  optional Origin origin = 2;
  optional bytes payload = 3;
}

extend google.protobuf.MessageOptions {
  optional Packet.Type packet_type = 50000;
}

message AbsoluteLocation {
  optional uint32 realm_id = 1;
  optional sint32 ax = 2;
  optional sint32 ay = 3;
}

message AbsoluteRealmLocation {
  optional uint32 realm_id = 1;
  optional sint32 arx = 2;
  optional sint32 ary = 3;
}

message Region {
  optional AbsoluteRealmLocation location = 1;
  repeated uint32 corners = 2;
}

message Realm {
  message AbsoluteSize {
    optional uint32 aw = 1;
    optional uint32 ah = 2;
  }

  optional uint32 id = 1;
  optional string name = 2;
  optional AbsoluteSize size = 3;
}

message Entity {
  extensions 100 to max;

  optional uint32 id = 1;
  optional string type = 3;
  optional uint32 direction = 4;
  optional AbsoluteLocation location = 5;
}

message Actor {
  extend Entity {
    optional Actor actor_ext = 101;
  }

  optional uint32 level = 1;
  optional uint32 hp = 2;
  optional uint32 max_hp = 3;
  optional uint32 mp = 4;
  optional uint32 max_mp = 5;
  optional uint32 xp = 6;
  optional uint32 max_xp = 7;
  optional string body = 8;
  optional string facial = 9;
  optional uint32 speed = 10;
}

message Player {
  extend Entity {
    optional Player player_ext = 102;
  }

  optional string name = 1;
}

message Fixture {
  extend Entity {
    optional Fixture fixture_ext = 103;
  }

  optional string fixture_type = 1;
  optional sint32 a_left = 2;
  optional sint32 a_top = 3;
  optional sint32 a_right = 4;
  optional sint32 a_bottom = 5;
}

message ErrorPacket {
  option (packet_type) = ERROR;

  optional string text = 1;
}

message ChatPacket {
  option (packet_type) = CHAT;

  optional string target = 1;
  optional string text = 2;
}

message MovePacket {
  option (packet_type) = MOVE;

  optional uint32 direction = 1;
}

message AvatarPacket {
  option (packet_type) = AVATAR;
}

message RealmPacket {
  option (packet_type) = REALM;

  optional Realm realm = 1;
}

message RegionPacket {
  option (packet_type) = REGION;

  optional Region region = 1;
}

message ViewportPacket {
  option (packet_type) = VIEWPORT;

  optional sint32 a_left = 1;
  optional sint32 a_top = 2;
  optional sint32 a_right = 3;
  optional sint32 a_bottom = 4;
}

message EntityPacket {
  option (packet_type) = ENTITY;
  optional Entity entity = 1;
}

message StopMovePacket {
  option (packet_type) = STOP_MOVE;
}

message TeleportPacket {
  option (packet_type) = TELEPORT;

  optional AbsoluteLocation location = 1;
  optional uint32 direction = 2;
}
