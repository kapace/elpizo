import "google/protobuf/descriptor.proto";

import "entities.proto";
import "geometry.proto";
import "items.proto";
import "realm.proto";

message Packet {
  enum Type {
    HELLO = 0;
    ERROR = 1;
    CHAT = 2;
    MOVE = 3;
    AVATAR = 4;
    REALM = 5;
    REGION = 6;
    VIEWPORT = 7;
    ENTITY = 8;
    STOP_MOVE = 9;
    TELEPORT = 10;
    STATUS = 11;
    PICK_UP = 12;
    DESPAWN_ENTITY = 13;
    INVENTORY = 14;
    ECHO = 15;
    TURN = 16;
    ATTACK = 17;
    DAMAGE = 18;
    DEATH = 19;
    WHOAMI = 20;
  }

  optional Type type = 1;
  optional string origin = 2;
  optional bytes payload = 3;
}

extend google.protobuf.MessageOptions {
  optional Packet.Type packet_type = 50000;
}

message HelloPacket {
  // Sent from the client to the server to authenticate.
  //
  // Direction: Client -> Server
  option (packet_type) = HELLO;

  optional bytes token = 1;
}

message ErrorPacket {
  // Sent to the client when an error occurs.
  //
  // Direction: Server -> Client
  option (packet_type) = ERROR;

  optional string text = 1;
}

message ChatPacket {
  // Sent by the client to relay a chat message; sent by the server to notify
  // the client of a received chat message.
  //
  // Direction: Server <-> Client
  option (packet_type) = CHAT;

  optional string target = 1;
  optional string actor_name = 2;
  optional string text = 3;
}

message MovePacket {
  // Sent by the client to perform a move; sent by the server to notify the
  // client of a performed move.
  //
  // Direction: Server <-> Client
  option (packet_type) = MOVE;
}

message AvatarPacket {
  // Sent by the server to indicate which entity is the avatar.
  //
  // Direction: Server -> Client
  option (packet_type) = AVATAR;
}

message RealmPacket {
  // Sent by the server to begin populating the client's realm information.
  //
  // Direction: Server -> Client
  option (packet_type) = REALM;

  optional Realm realm = 1;
}

message RegionPacket {
  // Sent by the server to populate the client's realm regions.
  //
  // Direction: Server -> Client
  option (packet_type) = REGION;

  optional Vector2 location = 1;
  optional Region region = 2;
}

message ViewportPacket {
  // Sent by the client to indicate its viewport size.
  //
  // Direction: Client -> Server
  option (packet_type) = VIEWPORT;

  optional Rectangle bounds = 1;
}

message EntityPacket {
  // Sent by the server to populate the client's realm entities.
  //
  // Direction: Server -> Client
  option (packet_type) = ENTITY;

  optional Entity entity = 1;
}

message StopMovePacket {
  // Sent by the client to indicate it has stopped moving; sent by the server to
  // notify a client to stop move animations.
  //
  // Direction: Server <-> Client
  option (packet_type) = STOP_MOVE;
}

message TeleportPacket {
  // Sent by the server to force a client to reposition itself.
  //
  // Direction: Server -> Client
  option (packet_type) = TELEPORT;

  optional Vector2 location = 1;
  optional Entity.Direction direction = 2;
}

message StatusPacket {
  // Sent by the server to indicate a change in status of a player.
  //
  // Direction: Server -> Client
  option (packet_type) = STATUS;

  optional bool online = 1;
}

message PickUpPacket {
  // Sent by the client to pick up an item at the origin's current location.
  //
  // Direction: Client -> Server
  option (packet_type) = PICK_UP;

  optional string drop_id = 1;
}

message DespawnEntityPacket {
  // Sent by the server to despawn the origin from the world.
  //
  // Direction: Server -> Client
  option (packet_type) = DESPAWN_ENTITY;
}

message InventoryPacket {
  // Sent by the server to indicate an item has been collected into the player's
  // inventory.
  //
  // Direction: Server -> Client
  option (packet_type) = INVENTORY;

  optional Item item = 1;
}

message EchoPacket {
  // Sent by the client to determine how much latency there is to the server;
  // sent by the server in response to the client.
  //
  // Direction: Server <-> Client
  option (packet_type) = ECHO;

  optional string payload = 1;
}

message TurnPacket {
  // Sent by the client to indicate that it has turned; sent by the server to
  // indicate a client has turned.
  //
  // Direction: Server <-> Client
  option (packet_type) = TURN;

  optional Entity.Direction direction = 1;
}

message AttackPacket {
  // Sent by the client to indicate an actor to attack; sent by the server to
  // indicate a client has attacked.
  //
  // Direction: Server <-> Client
  option (packet_type) = ATTACK;

  // The client is required to indicate the entities it attacked as the entities
  // may have moved from their original position on the server, but the client
  // state may not have been synchronized yet.
  repeated string entity_ids = 1;
}

message DamagePacket {
  // Sent by the server to indicate an actor has been damaged.
  //
  // Direction: Server -> Client
  option (packet_type) = DAMAGE;

  optional uint32 damage = 1;
}

message DeathPacket {
  // Sent by the server to indicate an entity has died.
  //
  // Direction: Server -> Client
  option (packet_type) = DEATH;
}

message WhoamiPacket {
  // Sent by the client to request its entity from the server. Generally only
  // useful for the NPC server which can authenticate as any NPC.
  //
  // Direction: Client -> Server
  option (packet_type) = WHOAMI;
}
